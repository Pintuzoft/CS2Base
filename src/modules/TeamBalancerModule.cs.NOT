using System;
using System.IO;
using CounterStrikeSharp.API;
using CounterStrikeSharp.API.Core;
using CounterStrikeSharp.API.Modules.Commands;
using CounterStrikeSharp.API.Modules.Cvars;
using CounterStrikeSharp.API.Core.Attributes.Registration;
using CounterStrikeSharp.API.Modules.Events;
using System.Diagnostics.Tracing;
using System.Reflection;

namespace OSBase.Modules;

using System.IO;

public class TeamBalancerModule : IModule {
    public string ModuleName => "TeamBalancerModule";

    private OSBase? osbase;
    private ConfigModule? config;
    private readonly Dictionary<CCSPlayerController, TeamBalancerPlayer> playerStats = new();

    public void Load(OSBase inOsbase, ConfigModule inConfig) {
        osbase = inOsbase;
        config = inConfig;

        // Register required config values
        config.RegisterGlobalConfigValue("teambalance_enabled", "1");

        // Register event handlers
        osbase.RegisterEventHandler<EventPlayerHurt>(OnPlayerHurt);
        osbase.RegisterEventHandler<EventPlayerDeath>(OnPlayerDeath);
        osbase.RegisterEventHandler<EventRoundEnd>(OnRoundEnd);

        Console.WriteLine("[INFO] TeamBalancerModule loaded successfully!");
    }

    /************************************************************************
        EVENT HANDLERS
    ************************************************************************/

    private HookResult OnPlayerHurt(EventPlayerHurt eventInfo, GameEventInfo gameEventInfo) {
        var attacker = eventInfo.Attacker;
        if (attacker == null || attacker.IsBot) return HookResult.Continue;

        var stats = GetOrCreatePlayerStats(attacker);

        

        stats.AddDamage(eventInfo.Damage);

        return HookResult.Continue;
    }
    private void OnPlayerDeath(EventPlayerDeath eventInfo, GameEventInfo gameEventInfo) {
        var attacker = eventInfo.Attacker;
        var victim = eventInfo.Userid;

        if (attacker != null && !attacker.IsBot) {
            var stats = GetOrCreatePlayerStats(attacker);
            stats.AddKill();
        }

        if (victim != null && !victim.IsBot) {
            var stats = GetOrCreatePlayerStats(victim);
            stats.AddDeath();
        }
    }

    private void OnRoundEnd(EventRoundEnd eventInfo, GameEventInfo gameEventInfo) {
        if (config == null || config.GetGlobalConfigValue("teambalance_enabled", "0") != "1") return;

        BalanceTeams();
    }

    /************************************************************************
        TEAM BALANCING
    ************************************************************************/

    private void BalanceTeams() {
        if (osbase == null) return;

        var players = Utilities.GetPlayers();
        var playerRatings = players.Select(p => new {
            Player = p,
            Rating = GetOrCreatePlayerStats(p).CalculateSkillRating()
        }).OrderByDescending(p => p.Rating).ToList();

        // Split players into CT and T teams based on skill ratings
        var teamCT = new List<CCSPlayerController>();
        var teamT = new List<CCSPlayerController>();

        foreach (var player in playerRatings) {
            if (teamCT.Count <= teamT.Count) {
                teamCT.Add(player.Player);
            } else {
                teamT.Add(player.Player);
            }
        }

        AssignPlayersToTeams(teamCT, teamT);
    }

    private void AssignPlayersToTeams(List<CCSPlayerController> teamCT, List<CCSPlayerController> teamT) {
        foreach (var player in teamCT) {
            player.ChangeTeam(Team.CT);
        }

        foreach (var player in teamT) {
            player.ChangeTeam(Team.T);
        }

        osbase?.SendCommand("say Teams have been balanced based on player performance.");
    }

    /************************************************************************
        PLAYER STATS
    ************************************************************************/

    private TeamBalancerPlayer GetOrCreatePlayerStats(CCSPlayerController player) {
        if (!playerStats.ContainsKey(player)) {
            playerStats[player] = new TeamBalancerPlayer(player.PlayerName);
        }
        return playerStats[player];
    }
}

public class TeamBalancerPlayer {
    public string PlayerName { get; }
    private int totalDamage;
    private int totalKills;
    private int totalDeaths;
    private int roundsPlayed;

    public TeamBalancerPlayer(string playerName) {
        PlayerName = playerName;
    }

    public void AddDamage(int damage) {
        totalDamage += damage;
    }

    public void AddKill() {
        totalKills++;
    }

    public void AddDeath() {
        totalDeaths++;
    }

    public double CalculateSkillRating() {
        roundsPlayed = Math.Max(roundsPlayed, 1); // Avoid division by zero

        double damageWeight = 0.05;
        double killWeight = 10.0;
        double deathPenalty = 5.0;

        return (totalDamage * damageWeight / roundsPlayed)
             + (totalKills * killWeight / roundsPlayed)
             - (totalDeaths * deathPenalty / roundsPlayed);
    }
}
